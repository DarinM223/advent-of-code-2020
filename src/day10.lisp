(defpackage day10 (:use :cl :iterate :utils))
(in-package :day10)

(defvar *input*
  (with-open-file (stream (relative-path #P"resources/day10.txt"))
    (let* ((l (iter (for line in-lines stream) (collect (parse-integer line))))
           (sorted (sort (copy-seq l) #'<)))
      (make-array (length sorted) :initial-contents sorted))))

(defun make-num-map (input)
  (iter (for num in-vector input with-index i) (collect num => i)))

(defun count-differences (input)
  (iter (with num-map = (make-num-map input))
    (with i = -1)
    (for jolts first 0 then (aref input i))
    (cond ((setf i (gethash (+ jolts 1) num-map)) (counting i into one-diffs))
          ((setf i (gethash (+ jolts 2) num-map)) (counting i into two-diffs))
          ((setf i (gethash (+ jolts 3) num-map)) (counting i into three-diffs))
          (t (setf i (length input))))
    (while (< i (length input)))
    (finally (return (values one-diffs two-diffs (+ three-diffs 1))))))

(defun num-arrangements (input)
  (labels ((rec (input i num-map cache)
             (cond ((gethash i cache) (gethash i cache))
                   ((= i (- (length input) 1)) 1)
                   (t (let* ((num (if (< i 0) 0 (aref input i)))
                             (i1 (gethash (+ num 1) num-map))
                             (i2 (gethash (+ num 2) num-map))
                             (i3 (gethash (+ num 3) num-map))
                             (result (+ (if i1 (rec input i1 num-map cache) 0)
                                        (if i2 (rec input i2 num-map cache) 0)
                                        (if i3 (rec input i3 num-map cache) 0))))
                        (setf (gethash i cache) result)
                        result)))))
    (rec input -1 (make-num-map input) (make-hash-table))))

(defparameter *part1*
  (multiple-value-bind (one-diffs _ three-diffs) (count-differences *input*)
    (declare (ignore _))
    (* one-diffs three-diffs)))
(defparameter *part2* (num-arrangements *input*))
